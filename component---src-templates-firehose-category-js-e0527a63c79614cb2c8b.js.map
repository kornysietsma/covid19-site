{"version":3,"sources":["webpack:///./src/templates/firehose-category.js","webpack:///./src/components/firehose-entry.js"],"names":["data","pageContext","edges","allFirehose","sort","a","b","node","date","title","navMode","metaMode","selectedCategory","map","query","urlRegex","require","FirehoseEntry","trim","titleIsUrl","exact","test","titleUrlMatches","match","titleUrlCount","length","cleanLines","lines","l","filter","lineIsUrl","titleHtml","href","target","rel","url","titleRemains","replace","dangerouslySetInnerHTML","__html","linesHtml","html","key","id","category","tags","join"],"mappings":"qMAKe,sBAA4B,IAAzBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAChBC,EAAQF,EAAKG,YAAYD,MAAME,MAAK,SAACC,EAAGC,GAC5C,OAAoB,OAAhBD,EAAEE,KAAKC,MAAiC,OAAhBF,EAAEC,KAAKC,MAAiBH,EAAEE,KAAKC,OAASF,EAAEC,KAAKC,KAClEH,EAAEE,KAAKE,MAAQH,EAAEC,KAAKE,MAExBJ,EAAEE,KAAKC,KAAOF,EAAEC,KAAKC,QAG9B,OACE,kBAAC,IAAD,CAAQP,YAAaA,EAAaS,QAAQ,WAAWC,SAAS,YAC5D,6BACA,yCAAeV,EAAYW,kBAC3B,4BACKV,EAAMW,KAAI,gBAAGN,EAAH,EAAGA,KAAH,OACX,kBAAC,IAAD,CAAeA,KAAMA,WAOxB,IAAMO,EAAK,c,+ECzBZC,EAAWC,EAAQ,QA2EVC,IAzEO,SAAC,GAAc,IAAZV,EAAW,EAAXA,KASjBE,EAAQF,EAAKE,MAAMS,OACnBC,EAAaJ,EAAS,CAAEK,OAAO,IAAQC,KAAKZ,GAC5Ca,EAAkBb,EAAMc,MAAMR,KAC9BS,EAAgBF,EAAkBA,EAAgBG,OAAS,EAE7DC,EAAanB,EAAKoB,MAAMd,KAAI,SAAAe,GAAC,OAAIA,EAAEV,UAAQW,QAAO,SAAAD,GAAC,OAAIA,EAAEH,OAAS,KAGhEK,KADmC,IAAtBJ,EAAWD,SAE1BV,EAAS,CAAEK,OAAO,IAAQC,KAAKK,EAAW,IAG1CK,EAAYtB,EAChB,GAAIU,EACFY,EACE,uBAAGC,KAAMvB,EAAOwB,OAAO,SAASC,IAAI,uBACjCzB,QAGA,GAAsB,IAAlBe,EAAqB,CAC9B,IAAMW,EAAMb,EAAgB,GACtBc,EAAe3B,EAAM4B,QAAQtB,IAAY,IAAIG,OACnDa,EACE,uBAAGC,KAAMG,EAAKF,OAAO,SAASC,IAAI,uBAC/BE,QAGIZ,EAAgB,GACzBO,EAAYtB,EAAM4B,QAChBtB,KACA,SAAAoB,GAAG,iBAAeA,EAAf,8CAAgEA,EAAhE,UAELJ,EAAY,0BAAMO,wBAAyB,CAAEC,OAAQR,MAE5CD,IACTC,EACE,uBAAGC,KAAMN,EAAW,GAAIO,OAAO,SAASC,IAAI,uBACzCzB,GAGLiB,EAAa,IAIf,IAAMc,EACJ,4BACGd,EAAWb,KAAI,SAAAe,GACd,IAAMa,EAAOb,EAAES,QACbtB,KACA,SAAAoB,GAAG,iBAAeA,EAAf,oBAAsCA,EAAtC,UAEL,OAAO,wBAAIG,wBAAyB,CAAEC,OAAQE,SAKpD,OACE,wBAAIC,IAAKnC,EAAKoC,IACXZ,EADH,KACgBxB,EAAKC,KADrB,KAC6BD,EAAKqC,SADlC,IAC6CrC,EAAKsC,KAAKC,KAAK,KACzDN","file":"component---src-templates-firehose-category-js-e0527a63c79614cb2c8b.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport FirehoseEntry from \"../components/firehose-entry\"\n\nexport default ({ data, pageContext }) => {\n  const edges = data.allFirehose.edges.sort((a, b) => {\n    if (a.node.date === null || b.node.date === null || a.node.date === b.node.date) {\n      return a.node.title > b.node.title;\n    }\n    return a.node.date < b.node.date;\n  });\n\n  return (\n    <Layout pageContext={pageContext} navMode='firehose' metaMode='firehose'>\n      <div>\n      <h2>Firehose: {pageContext.selectedCategory}</h2>\n      <ul>\n          {edges.map(({ node }) => (\n          <FirehoseEntry node={node}/>\n          ))}\n        </ul>\n      </div>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query($selectedCategory: String!) {\n    allFirehose(\n      filter: {\n        category: { eq: $selectedCategory }\n      }\n    ) {\n      edges {\n        node {\n          title\n          category\n          tags\n          lines\n          date\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nconst urlRegex = require(\"url-regex\")\n\nconst FirehoseEntry = ({ node }) => {\n  /*  * title can be text, a URL, or a URL + text\n   * if URL turn into link - maybe shrink text to smaller? \"link to foo.com\"?\n   * if URL + text turn into link with text\n   * if just text, leave alone\n   * lines might be blank or have URLs\n   * trim blanks\n   * if all that is left is a single URL, maybe turn the title into a link???\n   */\n  const title = node.title.trim()\n  const titleIsUrl = urlRegex({ exact: true }).test(title)\n  const titleUrlMatches = title.match(urlRegex())\n  const titleUrlCount = titleUrlMatches ? titleUrlMatches.length : 0\n\n  let cleanLines = node.lines.map(l => l.trim()).filter(l => l.length > 0)\n\n  const singleLine = cleanLines.length === 1\n  const lineIsUrl = singleLine\n    ? urlRegex({ exact: true }).test(cleanLines[0])\n    : false\n\n  let titleHtml = title\n  if (titleIsUrl) {\n    titleHtml = (\n      <a href={title} target=\"_blank\" rel=\"noopener noreferrer\">\n        {title}\n      </a>\n    )\n  } else if (titleUrlCount === 1) {\n    const url = titleUrlMatches[0]\n    const titleRemains = title.replace(urlRegex(), \"\").trim()\n    titleHtml = (\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {titleRemains}\n      </a>\n    )\n  } else if (titleUrlCount > 1) {\n    titleHtml = title.replace(\n      urlRegex(),\n      url => `<a href=${url} target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`\n    )\n    titleHtml = <span dangerouslySetInnerHTML={{ __html: titleHtml }} />\n    //   console.log(linkifyUrls(title, { type: \"string\", attributes: { target: \"_blank\" }}));\n  } else if (lineIsUrl) {\n    titleHtml = (\n      <a href={cleanLines[0]} target=\"_blank\" rel=\"noopener noreferrer\">\n        {title}\n      </a>\n    )\n    cleanLines = []\n  }\n\n  // todo - linkify lines, add tags\n  const linesHtml = (\n    <ul>\n      {cleanLines.map(l => {\n        const html = l.replace(\n          urlRegex(),\n          url => `<a href=${url} target=\"_blank\">${url}</a>`\n        )\n        return <li dangerouslySetInnerHTML={{ __html: html }} />\n      })}\n    </ul>\n  )\n\n  return (\n    <li key={node.id}>\n      {titleHtml} ({node.date}) {node.category}:{node.tags.join(\",\")}\n      {linesHtml}\n    </li>\n  )\n}\n\nexport default FirehoseEntry\n"],"sourceRoot":""}